/* 
  construct variables are for derivation only
  performance probably improved if these were hardcoded
  *-nounit and unit variables needed because calc cannot handle multiplication/division between unit-aware values
    i should probably learn how to use a preprocessor...
*/
.construct {
    /* outer radius size */
    --R-nounit: 10;

    /* style and animation */
    --border-width: 1px;
    --perspective: 30rem;
    --perspective-x-rotation: 60deg;
    --step-animation-duration: 1s;
    --plane-border-colour: var(--text);
    --colour1: var(--secondary-alt-2);
    --colour2: var(--primary-alt-2);
    --edge-colour: var(--accent);
    /* add transparency via color-mix: if weights add to < 100%, remainder is assumed transparent */
    --face-colour: color-mix(in oklab, var(--primary) 50%, white 0%);
    
    /* calculated lengths and angles */
    --unit: 1rem;
    /* outer radius */
    --R: calc(var(--R-nounit) * var(--unit));
    /* pentagon angles */
    --angle: 72deg;
    --halfangle: calc(0.5 * var(--angle));
    /* inner radius */
    --r-nounit: calc(cos(var(--halfangle)) * var(--R-nounit));
    --r: calc(var(--r-nounit) * var(--unit));
    /* icosahedron faces */
    --triangle-angle: 60deg;
    --side-nounit: calc(2 * var(--R-nounit) * sin(var(--halfangle)));
    --side: calc(var(--side-nounit) * var(--unit));
    --triangle-height-nounit: calc(var(--side-nounit) * sin(var(--triangle-angle))); 
    --triangle-height: calc(var(--triangle-height-nounit) * var(--unit));
    --triangle-tilt: calc(asin((var(--R-nounit) - var(--r-nounit)) / var(--triangle-height-nounit)));
    --triangle-tilt2: calc(asin(var(--r-nounit) / var(--triangle-height-nounit)));
    /* height between two pentagons */
    --pentagon-gap: calc(var(--triangle-height-nounit) * cos(var(--triangle-tilt)) * var(--unit));
    /* largest distance between vertices */
    --cap-height-nounit: calc(var(--triangle-height-nounit) * cos(var(--triangle-tilt2)));
    --icosahedron-height: calc(var(--pentagon-gap) + 2 * var(--cap-height-nounit) * var(--unit));

    position: relative; 
    perspective: var(--perspective);
    
    width: calc(2 * var(--R));
    aspect-ratio: 1;
    isolation: isolate;
}

.construct * {
    /*  no idea why these can't just be inherited  */
    transform-style: preserve-3d;
}

.hidden {
    display: none;
}

.xy-plane {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    border: var(--border-width) solid var(--plane-border-colour);
    z-index: 0;
}

.xy-plane.step-0 {
    --num-blinks: 2;
    animation: plane-blink calc(var(--step-animation-duration) / var(--num-blinks));
    animation-iteration-count: var(--num-blinks);
    z-index: 2;
}

@keyframes plane-blink {
    0%, 100% { opacity: 1 }
    50% { opacity: 0 }
}

.circle {
    aspect-ratio: 1;
    border: var(--border-width) solid var(--colour1);
    border-radius: 50%;
}

.outer {  
    width: calc(2 * var(--R));
    animation-name: fade-in;
    animation-duration: var(--step-animation-duration);
}

.diameter {
    width: 0;
    height: 100%;
    margin-left: auto;
    margin-right: auto;
    border: var(--border-width) solid var(--colour2); 
    animation: spin-fade-in var(--step-animation-duration);
}

@keyframes fade-in {
    from { opacity: 0 }
}
@keyframes spin-fade-in {
    from { 
        opacity: 0; 
        transform: rotate(-180deg);
    }
}

.inner {
    position: absolute;
    width: 50%;
    top: 25%;
    left: 50%;
    transform: rotate(90deg);
    animation-name: fade-in;
    animation-duration: var(--step-animation-duration);
}

.line {
    position: absolute;
    width: 0;
    /*  sqrt(0.5^2 + 0.25^2)  */
    height: 55.9017%;
    top: 50%;
    left: 75%;
    border: var(--border-width) solid var(--colour2);
    transform-origin: top;
    /*  atan(0.5)  */
    transform: rotate(26.56505deg);
    animation: reveal-top var(--step-animation-duration);
}

@keyframes reveal-top {
    from { height: 0 }
    to { opacity: 1 }
}

.cross {
    position: absolute; 
    /*  2 * (sqrt(0.5^2 + 0.25^2) - 0.25 )  */
    width: 61.8034%;
    /*  0.5 * (1 - width)  */
    left: 19.0983%;
    /*  1 - width/2  */
    top: 69.0983%;
    animation: scale-up var(--step-animation-duration);
}

@keyframes scale-up {
    from { transform: scale(0) }
}

.pentagon {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
}

.edge {
    position: absolute; 
    /* width: 58.77852523%; */
    width: var(--side);
    /* height: 40.45085%; */
    height: var(--r);
    /* 0.5 * (1 - width) */
    left: 20.61074%;
    top: 50%;
    border-bottom: var(--border-width) solid var(--edge-colour); 
    transform-origin: top center;
}

.step-5 .edge {
    animation-name: reveal-left;
    animation-duration: var(--step-animation-duration);
}

@keyframes reveal-left {
    from { width: 0 }
}

.edge:nth-of-type(2) {
    transform: rotateZ(calc(-1 * var(--angle)));
}

.edge:nth-of-type(3) {
    transform: rotateZ(calc(-2 * var(--angle)));
}

.edge:nth-of-type(4) {
    transform: rotateZ(calc(-3 * var(--angle)));
}

.edge:nth-of-type(5) {
    transform: rotateZ(calc(-4 * var(--angle)));
}

@keyframes rotate-from-0 {
    from { transform: rotateZ(0deg) }
}

.edge.step-6 {
    animation-name: rotate-from-0;
}

/* trigger step-*a transitions with js */
.construct[data-step~="7"] .step-7a {
    opacity: 0; 
    transition: opacity var(--step-animation-duration);
}

.step-7 .pentagon {
    transform: rotateZ(var(--halfangle));
    animation-name: rotate-from-0;
    animation-duration: var(--step-animation-duration);
}

.construct[data-step~="8"] .xy-plane.step-8a {
    transform: rotateX(var(--perspective-x-rotation));
    transition: transform var(--step-animation-duration);
}

.construct[data-step~="9"] .xy-plane.step-9a-bot {
    transform: rotateX(var(--perspective-x-rotation)) translateZ(calc(-0.5 * var(--pentagon-gap)));
    border: none;
}

.construct[data-step~="9"] .xy-plane.step-9a-top {
    transform: rotateX(var(--perspective-x-rotation)) translateZ(calc(0.5 * var(--pentagon-gap)));
    border: none;
}

.construct[data-step~="13"] .xy-plane.step-13a {
    opacity: 0;
    transition: opacity var(--step-animation-duration);
}

.construct[data-step~="14"] .xy-plane.step-14a {
    opacity: 0;
    transition: opacity var(--step-animation-duration);
}

.xy-plane.step-9 {
    transform: rotateX(var(--perspective-x-rotation));
    --grid-colour: rgba(255, 255, 255, 0.5);
    --grid-spacing: calc(var(--R) / 5);
    border: var(--border-width) solid var(--grid-colour);
    z-index: 1;
}

.grid-plane {
    position: absolute;
    width: 100%;
    height: 100%;
    background: conic-gradient(from 90deg at 1px 1px, #0000 90deg, var(--grid-colour) 0) 0 0/var(--grid-spacing) var(--grid-spacing);
    animation: fade-in var(--step-animation-duration);
}

.center-line {
    position: absolute;
    width: 0;
    height: var(--icosahedron-height);
    top: 50%;
    left: 50%;
    transform-origin: top center;
    transform: translateZ(calc(-0.5 * var(--icosahedron-height))) rotateX(90deg);
    border: var(--border-width) solid var(--grid-colour); 
    animation: extend-from-middle var(--step-animation-duration);
}

@keyframes extend-from-middle {
    from {
        height: 0;
        transform: translateZ(0) rotateX(90deg);
    }
}

.construct[data-step~="15"] .xy-plane.step-15a {
    opacity: 0;
    transition: opacity var(--step-animation-duration);
}

.icosahedron {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    transform: rotateX(var(--perspective-x-rotation));
    z-index: 2;
}

@keyframes rotation {
    from {
        transform: rotateX(var(--perspective-x-rotation)) rotateY(0turn) rotateZ(0turn);
    }
    to {
        transform: rotateX(var(--perspective-x-rotation)) rotateY(2turn) rotateZ(-1turn);
    }
}

.construct[data-step~="15"] .icosahedron.step-15a {
    animation: rotation 40s linear infinite;
}

/* 
    triangle faces of icosahedron: needlessly complex since drawing a border around a clip-path is painful
    current implementation looks like: 
    div.triangle    <-- anchors the transformations, animations
        ::before    <-- draws the left triangle border by rotating, translating and drawing border-bottom
        ::after     <-- draws the right triangle border similarly 
        .facet      <-- contains the triangle clip path, see-through background and bottom triangle border
    putting the clip path in the parent element will clip out the ::before and ::after borders
    putting the clip path into one of the pseudo-elements messes with the transformations
*/
.triangle {
    position: absolute;
    width: var(--side);
    height: var(--triangle-height);
    transform-origin: bottom center;
    animation-name: reveal-top;
    animation-duration: var(--step-animation-duration);
    animation-fill-mode: forwards;
    --animation-delay: 0.4s;
}

.triangle::before,
.triangle::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    top: calc(-0.5 * var(--triangle-height));
    border-bottom: calc(2 * var(--border-width)) solid var(--edge-colour);
    transform-origin: bottom;
    animation: fade-in var(--step-animation-duration);
}

.triangle::before {
    transform: rotate(-60deg);
    left: calc(-0.25 * var(--side));
}

.triangle::after {
    transform: rotate(60deg);
    left: calc(0.25 * var(--side));
}

.triangle .facet {
    position: relative;
    width: 100%;
    height: 100%;
    clip-path: polygon(0% 100%, 50% 0%, 100% 100%);
    background-color: var(--face-colour);
    border-bottom: var(--border-width) solid var(--edge-colour);
}

.triangle:nth-child(1) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(0 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(var(--triangle-tilt))
    ;
}

.triangle:nth-child(2) {
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(-1 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(var(--triangle-tilt))
    ;
}

.triangle:nth-child(3) {
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(-2 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(var(--triangle-tilt))
    ;
}

.triangle:nth-child(4) {
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(-3 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(var(--triangle-tilt))
    ;
}

.triangle:nth-child(5) {
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(-4 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(var(--triangle-tilt))
    ;
}

.triangle:nth-child(6) {
    opacity: 0;
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(0 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(calc(-1 * var(--triangle-tilt)))
    ;
    animation-duration: calc(var(--step-animation-duration) - var(--animation-delay));
    animation-delay: calc(0 * var(--animation-delay))
}

.triangle:nth-child(7) {
    opacity: 0;
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(1 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(calc(-1 * var(--triangle-tilt)))
    ;
    animation-duration: calc(var(--step-animation-duration) - var(--animation-delay));
    animation-delay: calc(0.25 * var(--animation-delay))
}

.triangle:nth-child(8) {
    opacity: 0;
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(2 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(calc(-1 * var(--triangle-tilt)))
    ;
    animation-duration: calc(var(--step-animation-duration) - var(--animation-delay));
    animation-delay: calc(0.5 * var(--animation-delay))
}

.triangle:nth-child(9) {
    opacity: 0;
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(3 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(calc(-1 * var(--triangle-tilt)))
    ;
    animation-duration: calc(var(--step-animation-duration) - var(--animation-delay));
    animation-delay: calc(0.75 * var(--animation-delay))
}

.triangle:nth-child(10) {
    opacity: 0;
    transform:
        translate3d(0, -50%, 0)
        rotateZ(calc(4 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(calc(-1 * var(--triangle-tilt)))
    ;
    animation-duration: calc(var(--step-animation-duration) - var(--animation-delay));
    animation-delay: calc(1 * var(--animation-delay))
}

.triangle:nth-child(11) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(0 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(var(--triangle-tilt2))
    ;
}

.triangle:nth-child(12) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(-1 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(var(--triangle-tilt2))
    ;
}

.triangle:nth-child(13) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(-2 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(var(--triangle-tilt2))
    ;
}

.triangle:nth-child(14) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(-3 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(var(--triangle-tilt2))
    ;
}

.triangle:nth-child(15) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(-4 * var(--angle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(0.5 * var(--pentagon-gap))
        )
        rotateX(-90deg)
        rotateX(var(--triangle-tilt2))
    ;
}

.triangle:nth-child(16) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(0 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(calc(-1 * var(--triangle-tilt2)))
    ;
}

.triangle:nth-child(17) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(1 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(calc(-1 * var(--triangle-tilt2)))
    ;
}

.triangle:nth-child(18) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(2 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(calc(-1 * var(--triangle-tilt2)))
    ;
}


.triangle:nth-child(19) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(3 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(calc(-1 * var(--triangle-tilt2)))
    ;
}

.triangle:nth-child(20) {
    transform: 
        translate3d(0, -50%, 0)
        rotateZ(calc(4 * var(--angle) + var(--halfangle)))
        translate3d(
            0, 
            calc(1 * var(--r)), 
            calc(-0.5 * var(--pentagon-gap))
        )
        rotateX(90deg)
        rotateX(calc(-1 * var(--triangle-tilt2)))
    ;
}


.construct[data-step~="16"] .triangle:nth-child(3n).step-16a {
    animation: implode1 var(--step-animation-duration);
    animation-fill-mode: forwards;
}

.construct[data-step~="16"] .triangle:nth-child(3n+1).step-16a {
    animation: implode2 var(--step-animation-duration);
    animation-delay: calc(0.2 * var(--step-animation-duration));
    animation-fill-mode: forwards;
}

.construct[data-step~="16"] .triangle:nth-child(3n+2).step-16a {
    animation: implode3 var(--step-animation-duration);
    animation-delay: calc(0.2 * var(--step-animation-duration));
    animation-fill-mode: forwards;
}

@keyframes implode1 {
    to {
        transform: skew(0.5turn, 1.5turn) rotate(0turn) scale(0.1) translate3d(0, 0, 0);
        opacity: 0;
    }
}

@keyframes implode2 {
    to {
        transform: skew(0.5turn, 1.5turn) rotate(2turn) scale(0.1) translate3d(0, 0, 0);
        opacity: 0;
    }
}

@keyframes implode3 {
    to {
        transform: skew(1.5turn, -0.5turn) rotate(-2turn) scale(0.1) translate3d(0, 0, 0);
        opacity: 0;
    }
}